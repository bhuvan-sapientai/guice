---
modelFingerprint: "27252E2E5677CA615DF02108E3929BA5"
methods:
- method:
    name: "getSource"
    signature: "getSource() : java.lang.Object"
    instructionFingerprint: "248155FE419174FE37A7DDAFC34E5EFD"
  paths:
  - pathId: "path1"
    testPathName: "getSourceTest"
    constructorSignature: "<init>(java.lang.Object,com.google.inject.matcher.Matcher<?\
      \ super com.google.inject.TypeLiteral<?>>,com.google.inject.spi.TypeConverter)\
      \ : void"
    filledByUser: false
    modelFingerprint: "99CC32F860D033F8C105510037BCA03C"
    problemWasSolvedByProver: false
    truncated: true
    inputParameters: []
    uuid: "b18e1b7c-5aa2-3b75-96ca-a0f74ce65f85"
    deleted: false
    disabled: false
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: com.google.common.base.Preconditions.checkNotNull(java.lang.Object,java.lang.String)\
        \ : java.lang.Object"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues: []
- method:
    name: "getTypeMatcher"
    signature: "getTypeMatcher() : com.google.inject.matcher.Matcher<? super com.google.inject.TypeLiteral<?>>"
    instructionFingerprint: "B4DE9ABD6085FC28F9EDB46A705CD81B"
  paths:
  - pathId: "path1"
    testPathName: "getTypeMatcherTest"
    constructorSignature: "<init>(java.lang.Object,com.google.inject.matcher.Matcher<?\
      \ super com.google.inject.TypeLiteral<?>>,com.google.inject.spi.TypeConverter)\
      \ : void"
    filledByUser: false
    modelFingerprint: "DD6CE9711E948143B6DD6B82159A0953"
    problemWasSolvedByProver: false
    truncated: true
    inputParameters: []
    uuid: "866b0954-aef5-3d76-a824-007b547314fc"
    deleted: false
    disabled: false
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: com.google.common.base.Preconditions.checkNotNull(java.lang.Object,java.lang.String)\
        \ : java.lang.Object"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues: []
- method:
    name: "getTypeConverter"
    signature: "getTypeConverter() : com.google.inject.spi.TypeConverter"
    instructionFingerprint: "FB3D3D5EEAE1DA4061BD1E114678BCC7"
  paths:
  - pathId: "path1"
    testPathName: "getTypeConverterTest"
    constructorSignature: "<init>(java.lang.Object,com.google.inject.matcher.Matcher<?\
      \ super com.google.inject.TypeLiteral<?>>,com.google.inject.spi.TypeConverter)\
      \ : void"
    filledByUser: false
    modelFingerprint: "A64AA7B3B4337FD5FD498EA7ABC57E1A"
    problemWasSolvedByProver: false
    truncated: true
    inputParameters: []
    uuid: "fe59afed-dc72-39d2-9a11-f13e0d85347b"
    deleted: false
    disabled: false
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: com.google.common.base.Preconditions.checkNotNull(java.lang.Object,java.lang.String)\
        \ : java.lang.Object"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues: []
- method:
    name: "acceptVisitor"
    signature: "acceptVisitor(com.google.inject.spi.ElementVisitor<java.lang.Object>)\
      \ : java.lang.Object"
    instructionFingerprint: "336707767FD6725F77918B28F4FDA41A"
  paths:
  - pathId: "path1"
    testPathName: "acceptVisitorTest"
    constructorSignature: "<init>(java.lang.Object,com.google.inject.matcher.Matcher<?\
      \ super com.google.inject.TypeLiteral<?>>,com.google.inject.spi.TypeConverter)\
      \ : void"
    filledByUser: false
    modelFingerprint: "2F97AD8BFF8F056196EAE7B880D49223"
    problemWasSolvedByProver: false
    truncated: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "5F0270E0AB601493CC54F12E47D20CB3"
      index: 1
      ignored: false
      valueUuid: "target"
      staticReadMethodForField: false
      filledByUser: false
    - type: "INPUT"
      name: "visitor"
      modelFingerprint: "0E52E81CBBD90E16A6597837C87A9142"
      index: 2
      ignored: false
      valueUuid: "acceptVisitor_elementVisitor1"
      staticReadMethodForField: false
      filledByUser: false
    - type: "LOCAL_VARIABLE"
      name: "visitor"
      modelFingerprint: "5A1F1FD33FCC0F7F73280F32D363B0EC"
      index: 3
      ignored: false
      valueUuid: "acceptVisitor_elementVisitor1"
      methodExercised:
        target: "visitor"
        name: "visit"
        parameters:
        - name: "binding"
          valueUuid: "targetClassObject"
        signature: "visit(TypeConverterBinding): Object"
        returnValueUuid: "acceptVisitor_object1"
        access: 1025
      staticReadMethodForField: false
      filledByUser: false
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EDA2651BB29D8448EA5A2C6E4F135F6E"
      index: 4
      ignored: false
      valueUuid: "acceptVisitor_object1"
      staticReadMethodForField: false
      filledByUser: false
    uuid: "85010207-16d2-3170-b836-208737cec5b9"
    deleted: false
    disabled: true
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: com.google.common.base.Preconditions.checkNotNull(java.lang.Object,java.lang.String)\
        \ : java.lang.Object"
    prover: "LLM"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: true
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.google.inject.spi.TypeConverterBinding"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            suggestedContent: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.lang.Object"
            uuid: "<init>_object1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeMatcher"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.matcher.Matcher"
            genericValueType: "? super com.google.inject.TypeLiteral<?>"
            uuid: "<init>_matcher1"
            fixed: false
            nameForMock: "typeMatcher_value"
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeConverter"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.spi.TypeConverter"
            uuid: "<init>_typeConverter1"
            fixed: false
            nameForMock: "typeConverter_value"
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "com.google.inject.spi.TypeConverterBinding"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            suggestedContent: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.lang.Object"
            uuid: "<init>_object1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeMatcher"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.matcher.Matcher"
            genericValueType: "? super com.google.inject.TypeLiteral<?>"
            uuid: "<init>_matcher1"
            fixed: false
            nameForMock: "typeMatcher_value"
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeConverter"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.spi.TypeConverter"
            uuid: "<init>_typeConverter1"
            fixed: false
            nameForMock: "typeConverter_value"
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: false
      valueType: "com.google.inject.spi.TypeConverterBinding"
      uuid: "target"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.spi.ElementVisitor"
      genericValueType: "java.lang.Object"
      uuid: "acceptVisitor_elementVisitor1"
      fixed: false
      nameForMock: "visitor_value"
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.spi.ElementVisitor"
      genericValueType: "java.lang.Object"
      uuid: "acceptVisitor_elementVisitor1"
      fixed: false
      nameForMock: "visitor_value"
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.lang.Object"
      uuid: "acceptVisitor_object1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "THIS"
      valueType: "com.google.inject.spi.TypeConverterBinding"
      uuid: "targetClassObject"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.lang.Object"
      uuid: "acceptVisitor_object1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
- method:
    name: "applyTo"
    signature: "applyTo(com.google.inject.Binder) : void"
    instructionFingerprint: "C92C694D7643C76ACD31158F15BB6B97"
  paths:
  - pathId: "path1"
    testPathName: "applyToTest"
    constructorSignature: "<init>(java.lang.Object,com.google.inject.matcher.Matcher<?\
      \ super com.google.inject.TypeLiteral<?>>,com.google.inject.spi.TypeConverter)\
      \ : void"
    filledByUser: false
    modelFingerprint: "A8B45B93EB66175B369FD62638E32F1A"
    problemWasSolvedByProver: false
    truncated: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "5F0270E0AB601493CC54F12E47D20CB3"
      index: 1
      ignored: false
      valueUuid: "target"
      staticReadMethodForField: false
      filledByUser: false
    - type: "INPUT"
      name: "binder"
      modelFingerprint: "C324ECF14902F2238945D7606C2D0F77"
      index: 2
      ignored: false
      valueUuid: "applyTo_binder1"
      staticReadMethodForField: false
      filledByUser: false
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "408B1B2C20033D513198D543E03D9356"
      index: 3
      ignored: false
      valueUuid: "applyTo_binder1"
      methodExercised:
        target: "binder"
        name: "withSource"
        parameters:
        - name: "source"
          valueUuid: "<init>_object2"
        signature: "withSource(Object): Binder"
        returnValueUuid: "applyTo_binder2"
        access: 1025
      staticReadMethodForField: false
      filledByUser: false
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5A2034721C01FFB6333AA28FB54FB23F"
      index: 4
      ignored: false
      valueUuid: "applyTo_binder2"
      methodExercised:
        target: "com.google.inject.Binder"
        name: "convertToTypes"
        parameters:
        - name: "typeMatcher"
          valueUuid: "<init>_matcher2"
        - name: "converter"
          valueUuid: "<init>_typeConverter2"
        signature: "convertToTypes(Matcher,TypeConverter): void"
        returnValueUuid: "applyTo_void1"
        access: 1025
      staticReadMethodForField: false
      filledByUser: false
    - type: "RESULT"
      name: "result"
      modelFingerprint: "68041019986276EDF5D420282D883A57"
      index: 5
      ignored: false
      valueUuid: "uuid1"
      staticReadMethodForField: false
      filledByUser: false
    uuid: "0f0a622f-1e3b-3dc0-a3ae-a6ceb63c4e13"
    deleted: false
    disabled: true
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: com.google.common.base.Preconditions.checkNotNull(java.lang.Object,java.lang.String)\
        \ : java.lang.Object"
    prover: "LLM"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: true
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.google.inject.spi.TypeConverterBinding"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            suggestedContent: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.lang.Object"
            uuid: "<init>_object1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeMatcher"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.matcher.Matcher"
            genericValueType: "? super com.google.inject.TypeLiteral<?>"
            uuid: "<init>_matcher1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeConverter"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.spi.TypeConverter"
            uuid: "<init>_typeConverter1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "com.google.inject.spi.TypeConverterBinding"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            suggestedContent: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.lang.Object"
            uuid: "<init>_object1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeMatcher"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.matcher.Matcher"
            genericValueType: "? super com.google.inject.TypeLiteral<?>"
            uuid: "<init>_matcher1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeConverter"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.spi.TypeConverter"
            uuid: "<init>_typeConverter1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: false
      valueType: "com.google.inject.spi.TypeConverterBinding"
      uuid: "target"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.Binder"
      uuid: "applyTo_binder1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.Binder"
      uuid: "applyTo_binder1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.Binder"
      uuid: "applyTo_binder2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.lang.Object"
      uuid: "<init>_object2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.Binder"
      uuid: "applyTo_binder2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "VOID"
      valueType: "void"
      uuid: "applyTo_void1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.matcher.Matcher"
      genericValueType: "? super com.google.inject.TypeLiteral<?>"
      uuid: "<init>_matcher2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.spi.TypeConverter"
      uuid: "<init>_typeConverter2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "VOID"
      uuid: "uuid1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
- method:
    name: "toString"
    signature: "toString() : java.lang.String"
    instructionFingerprint: "B70CA75EE4FFE82DCED25AA076EF2110"
  paths:
  - pathId: "path1"
    testPathName: "toStringTest"
    constructorSignature: "<init>(java.lang.Object,com.google.inject.matcher.Matcher<?\
      \ super com.google.inject.TypeLiteral<?>>,com.google.inject.spi.TypeConverter)\
      \ : void"
    filledByUser: false
    modelFingerprint: "9FFE6CE9071025E4BAACE1DF7FB03EF9"
    problemWasSolvedByProver: false
    truncated: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "5F0270E0AB601493CC54F12E47D20CB3"
      index: 1
      ignored: false
      valueUuid: "target"
      staticReadMethodForField: false
      filledByUser: false
    - type: "STATIC"
      name: "Errors"
      modelFingerprint: "B0089226646B323470116DB30F6AECC9"
      index: 2
      ignored: false
      valueUuid: "uuid1"
      methodExercised:
        target: "com.google.inject.internal.Errors"
        name: "convert"
        parameters:
        - name: "o"
          valueUuid: "<init>_object2"
        signature: "convert(Object): Object"
        returnValueUuid: "toString_object1"
        access: 9
      staticReadMethodForField: false
      filledByUser: false
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0D952A4D973B53168C5055D196776799"
      index: 3
      ignored: false
      valueUuid: "toString_string1"
      staticReadMethodForField: false
      filledByUser: false
    uuid: "363d3698-f34c-39ad-914f-376a19498023"
    deleted: false
    disabled: true
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: com.google.common.base.Preconditions.checkNotNull(java.lang.Object,java.lang.String)\
        \ : java.lang.Object"
    prover: "LLM"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: true
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "com.google.inject.spi.TypeConverterBinding"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            suggestedContent: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.lang.Object"
            uuid: "<init>_object1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeMatcher"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.matcher.Matcher"
            genericValueType: "? super com.google.inject.TypeLiteral<?>"
            uuid: "<init>_matcher1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeConverter"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.spi.TypeConverter"
            uuid: "<init>_typeConverter1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "com.google.inject.spi.TypeConverterBinding"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            suggestedContent: !<new>
              target: "java.lang.Object"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.lang.Object"
            uuid: "<init>_object1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeMatcher"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.matcher.Matcher"
            genericValueType: "? super com.google.inject.TypeLiteral<?>"
            uuid: "<init>_matcher1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "typeConverter"
          value:
            sapientType: "MOCK"
            valueType: "com.google.inject.spi.TypeConverter"
            uuid: "<init>_typeConverter1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: false
      valueType: "com.google.inject.spi.TypeConverterBinding"
      uuid: "target"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "com.google.inject.internal.Errors"
      uuid: "uuid1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "java.lang.Object"
      uuid: "toString_object1"
      fixed: false
      nameForMock: "toString_object1"
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      suggestedContent: !<new>
        target: "java.lang.Object"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.lang.Object"
      uuid: "<init>_object2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "BASIC"
      content: !<regular>
        value: "<init>_typeConverter2 which matches <init>_matcher2 (bound at toString_object1)"
      suggestedContent: !<regular>
        value: "<init>_typeConverter2 which matches <init>_matcher2 (bound at toString_object1)"
      valueType: "java.lang.String"
      uuid: "toString_string1"
      fixed: false
      equalsMethodPresent: true
      explicitCastNeeded: false
